@model QuizFormsApp.Models.Template

@{
    ViewData["Title"] = "Create Template";
}
@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <strong>Validation Errors:</strong>
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}



<h2>Create New Template</h2>

<form asp-controller="Template" asp-action="Create" method="post">
    <div class="mb-3">
        <label class="form-label">Title</label>
        <input asp-for="Title" class="form-control" required />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label class="form-label">Description</label>
        <textarea asp-for="Description" class="form-control"></textarea>
    </div>

<div class="mb-3">
    <label asp-for="TopicId" class="form-label">Select Topic</label>
    <select asp-for="TopicId" asp-items="ViewBag.Topics" class="form-select">
        <option value="">-- Select a Topic --</option>
    </select>
    <span asp-validation-for="TopicId" class="text-danger"></span>
</div>

<div class="mb-3">
    <label class="form-label">Is Public?</label>
    <input asp-for="IsPublic" type="checkbox" class="form-check-input" id="publicCheckbox" />
    <input type="hidden" name="IsPublic" value="false" /> <!-- ✅ Ensure false is sent when unchecked -->
</div>


    <!-- ✅ User Selection -->
    <div class="mb-3">
        <label class="form-label">Select Users (for private templates)</label>
        <input type="text" id="userSearch" class="form-control" placeholder="Search users by name or email..." />
        <ul id="userList" class="list-group mt-2"></ul>
    </div>

    <!-- ✅ Hidden input to store selected user emails -->
    <input type="hidden" name="selectedUsers" id="selectedUsers" />

    <!-- ✅ Selected Users List -->
    <h5>Allowed Users:</h5>
    <ul id="selectedUserList" class="list-group mb-3"></ul>

    <button type="submit" class="btn btn-primary">Create</button>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener("DOMContentLoaded", function () {
    let userSearch = document.getElementById("userSearch");
    let userList = document.getElementById("userList");
    let selectedUsers = [];
    let selectedUsersInput = document.getElementById("selectedUsers");
    let selectedUserList = document.getElementById("selectedUserList");

    userSearch.addEventListener("input", function () {
        let query = this.value.trim();
        if (query.length < 2) {
            userList.innerHTML = "";
            return;
        }

        fetch(`/Template/SearchUsers?query=${query}`)
            .then(response => response.json())
            .then(users => {
                userList.innerHTML = "";
                users.forEach(user => {
                    let listItem = document.createElement("li");
                    listItem.className = "list-group-item d-flex justify-content-between align-items-center";
                    listItem.textContent = `${user.displayName} (${user.email})`;

                    let addButton = document.createElement("button");
                    addButton.className = "btn btn-success btn-sm";
                    addButton.textContent = "Add";
                    addButton.type = "button";  // ✅ Prevents form submission
                    addButton.onclick = function (event) {
                        event.preventDefault(); // ✅ Stops form from submitting
                        addUser(user.email, user.displayName);
                    };

                    listItem.appendChild(addButton);
                    userList.appendChild(listItem);
                });
            });
    });

    function addUser(email, name) {
        if (!selectedUsers.includes(email)) {
            selectedUsers.push(email);
            updateSelectedUsers();
        }
    }

    function removeUser(email) {
        selectedUsers = selectedUsers.filter(user => user !== email);
        updateSelectedUsers();
    }

    function updateSelectedUsers() {
        selectedUserList.innerHTML = "";
        selectedUsers.forEach(email => {
            let listItem = document.createElement("li");
            listItem.className = "list-group-item d-flex justify-content-between align-items-center";
            listItem.textContent = email;

            let removeButton = document.createElement("button");
            removeButton.className = "btn btn-danger btn-sm";
            removeButton.textContent = "Remove";
            removeButton.type = "button"; // ✅ Prevents form submission
            removeButton.onclick = function (event) {
                event.preventDefault(); // ✅ Stops form from submitting
                removeUser(email);
            };

            listItem.appendChild(removeButton);
            selectedUserList.appendChild(listItem);
        });

        // ✅ Update hidden input with selected users
        selectedUsersInput.value = selectedUsers.join(",");
    }
});
    </script>
}
